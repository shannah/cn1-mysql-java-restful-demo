package com.codename1.demos.sakila;


import com.codename1.components.InfiniteScrollAdapter;
import com.codename1.components.MultiButton;
import com.codename1.components.ShareButton;
import com.codename1.components.ToastBar;
import com.codename1.contacts.Contact;

import com.codename1.io.ConnectionRequest;
import com.codename1.io.JSONParser;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Util;
import com.codename1.l10n.L10NManager;
import com.codename1.messaging.Message;
import com.codename1.processing.Result;
import com.codename1.ui.Button;
import com.codename1.ui.Command;
import com.codename1.ui.Component;
import com.codename1.ui.Container;
import com.codename1.ui.Font;
import com.codename1.ui.FontImage;
import com.codename1.ui.Graphics;
import com.codename1.ui.Image;
import com.codename1.ui.SwipeableContainer;

import com.codename1.ui.Toolbar;
import com.codename1.ui.events.ScrollListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.table.TableLayout;
import com.codename1.util.SuccessCallback;
import com.codename1.ws.RESTfulWebServiceClient;
import com.codename1.ws.RESTfulWebServiceClient.Query;
import com.codename1.ws.RESTfulWebServiceClient.RowSet;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class SakilaDemo {

    private Form current;
    private Resources theme;
    private HashMap<String, Image> letterCache = new HashMap<>();
    private Image circleLineImage;
    private Object circleMask;
    private int circleMaskWidth;
    private int circleMaskHeight;
    private Font letterFont;
    private boolean finishedLoading;
    private long lastScroll;
    private boolean messageShown;
    
    String customerEndpoint = "http://localhost:8080/SakilaRESTServer/webresources/com.codename1.demos.sakilarestserver.customer";
    
    // Database Connection Properties
    RESTfulWebServiceClient client;
    
    
    // Style functionality -----------------------------------------------------
    
    /**
     * Creates the letter image that appears on the left side of each row
     * with the first letter of the contact's name
     * @param c
     * @param cmp
     * @return 
     */
    private Image getLetter(char c, Component cmp) {
        c = Character.toUpperCase(c);
        String cstr = "" + c;
        Image i = letterCache.get(cstr);
        if(i != null) {
            return i;
        }
         
        int off = (c - 'A') % 7 + 1;
        int color = cmp.getUIManager().getComponentStyle("Blank" + off).getBgColor();
        Image img = Image.createImage(circleMaskWidth, circleMaskHeight, 0);
        Graphics g = img.getGraphics();
        g.setColor(color);
        g.fillArc(1, 1, circleMaskWidth - 2, circleMaskHeight - 2, 0, 360);
        g.setFont(letterFont);
        g.setColor(0xffffff);
        int w = letterFont.charWidth(c);
        g.drawString(cstr, img.getWidth() / 2 - w / 2, img.getHeight() / 2 - letterFont.getHeight() / 2);
        g.drawImage(circleLineImage, 0, 0);
        letterCache.put(cstr, img);
        return img;
    }
    
    // Misc Utility Methods ----------------------------------------------------
    private static String notNullOrEmpty(String... s) {
        StringBuilder b = new StringBuilder();
        for(String ss : s) {
            if(ss == null || ss.length() == 0) {
                return "";
            }
            b.append(ss);
        }
        return b.toString();
    }
    

    // Lifecycle Methods -------------------------------------------------------
    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature, uncomment if you have a pro subscription
        // Log.bindCrashProtection(true);
        
        client = new RESTfulWebServiceClient(customerEndpoint);
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
        Form hi = new Form("Contacts");
        hi.setLayout(new BorderLayout());
        
        hi.show();
        Display.getInstance().callSerially(()->{
            loadContacts(rowset->{
                
                hi.addComponent(BorderLayout.CENTER, createContactsList(hi, rowset));
            });
        });
    }

    public void stop() {
        current = Display.getInstance().getCurrent();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = Display.getInstance().getCurrent();
        }
    }
    
    
    public void destroy() {
    }
    
    // Web Service Methods -----------------------------------------------------
    
    /**
     * Loads all of the contacts from the database asynchronously.  On complete
     * the callback will be called with the resulting rowset as a parameter, or
     * null if there was an error.
     * @param callback Callback to handle the received rowset. 
     */
    private void loadContacts(SuccessCallback<RowSet> callback) {
        Query q = new Query();
        client.find(q, callback);
        
    }
    
    /**
     * Convert a record from the "contact" table into a Contact object.
     * @param record A record from the "contact" table.
     * @return A Contact object
     */
    private static Contact createContact(Map m) {
        Result record = Result.fromContent(m);
        Contact c = new Contact();
        c.setFirstName(record.getAsString("firstName"));
        c.setFamilyName(record.getAsString("lastName"));
        c.setPrimaryEmail(record.getAsString("email"));
        return c;
    }
    
    /**
     * Convert a rowset (from the contact table) into an array of Contact
     * objects
     * @param rowset A rowset from the contact table.
     * @return An array of Contact records.
     */
    private static Contact[] rowsetToContactsArray(RowSet rowset) {
        List<Contact> lst = new ArrayList<Contact>();
        for (Map record : rowset) {
            lst.add(createContact(record));
        }
        return lst.toArray(new Contact[lst.size()]);
    }
    
    // View Factory Methods ----------------------------------------------------
    
    /**
     * Creates a list of contacts included in the specified rowset.
     * @param parentForm The parent form
     * @param rowset The rowset to encapsulate (from the "contact" table)
     * @return A container to be added to the form.
     */
    private Container createContactsList(Form parentForm, RowSet rowset) {
        Contact[] contacts = rowsetToContactsArray(rowset);
        Image circleImage =theme.getImage("circle.png");
        circleLineImage = theme.getImage("circle-line.png");

        parentForm.addPointerDraggedListener(e -> lastScroll = System.currentTimeMillis());
        parentForm.addShowListener(e -> {
            if(!messageShown){
                messageShown = true;               
                ToastBar.showMessage("Swipe the contacts to both sides to expose additional options", FontImage.MATERIAL_COMPARE_ARROWS, 2000);        
            }
        });
        
        circleMask = circleImage.createMask();
        circleMaskWidth = circleImage.getWidth();
        circleMaskHeight = circleImage.getHeight();
        letterFont = Font.createTrueTypeFont("native:MainThin", "native:MainThin");
        letterFont = letterFont.derive(circleMaskHeight - circleMaskHeight/ 3, Font.STYLE_PLAIN);
        
        final Container contactsDemo = new Container(BoxLayout.y());        
        contactsDemo.setScrollableY(true);
        
        for(Contact c : contacts) {
            Container row = createContactRow(c, contactsDemo);
            if (row != null) {
                contactsDemo.add(row);
            }
        }
        contactsDemo.revalidate();
        finishedLoading = true;
        RowSet[] lastSet = new RowSet[]{rowset};
        InfiniteScrollAdapter.createInfiniteScroll(contactsDemo, () -> {
            Query nextQuery = lastSet[0].getNextQuery();
            if (nextQuery.getSkip() > lastSet[0].getSkip()) {
                
                client.find(nextQuery, newResult -> {
                    if (newResult == null) {
                        return;
                    }
                    List<Component> toAdd = new ArrayList<Component>();
                    for (Map row : newResult) {
                        Container cntRow = createContactRow(createContact(row), contactsDemo);
                        if (cntRow != null) {
                            toAdd.add(cntRow);
                        }
                    }
                    InfiniteScrollAdapter.addMoreComponents(contactsDemo, toAdd.toArray(new Component[toAdd.size()]), true);
                    lastSet[0] = newResult;
                    contactsDemo.revalidate();
                });
            }
        });
        
        return contactsDemo;
    }
    
    /**
     * Creates a single row for the contact list that encapsulates the provided
     * contact. 
     * @param c The contact to represent with this row.
     * @param parent The parent container to which the row is to be added.  This method doesn't actually add the 
     * row to the parent, but it does need to reference it for some of the listeners that are added to the row.  The caller
     * should add the resulting row to the parent after calling this method.
     * @return A container encapsulating the row, or null if the contact didn't have a name.
     */
    private Container createContactRow(Contact c, Container parent) {
        String dname = c.getDisplayName();
        if(dname == null || dname.length() == 0) {
            return null;
        }
        MultiButton mb = new MultiButton(dname);
        mb.setIconUIID("ContactIcon");

        // we need this for the SwipableContainer below
        mb.getAllStyles().setBgTransparency(255);
        mb.setTextLine2(c.getNote());
        mb.setIcon(getLetter(dname.charAt(0), mb));
        //Button delete = new Button();
        //delete.setUIID("SwipeableContainerButton");
        //FontImage.setMaterialIcon(delete, FontImage.MATERIAL_DELETE, 8);

        Button info = new Button();
        info.setUIID("SwipeableContainerInfoButton");
        FontImage.setMaterialIcon(info, FontImage.MATERIAL_INFO, 8);
        info.addActionListener(e -> {
            Dialog dlg = new Dialog(dname);
            TableLayout tl = new TableLayout(3, 2);
            dlg.setLayout(tl);
            Map emailHash = c.getEmails();
            Container emails;
            if(emailHash != null && emailHash.size() > 0) {
                Button[] emailArr = new Button[emailHash.size()];
                int off = 0;
                for(Object ee : emailHash.values()) {
                    emailArr[off] = new Button((String)ee);
                    FontImage.setMaterialIcon(emailArr[off], FontImage.MATERIAL_EMAIL);
                    emailArr[off].addActionListener(ev -> {
                        dlg.dispose();
                        Message m = new Message("");
                        Display.getInstance().sendMessage(new String[] {(String)ee}, "Sent from Codename One!", m);
                    });
                    off ++;
                }
                emails = BoxLayout.encloseY(emailArr);
            } else {
                emails = new Container(BoxLayout.y());
            }

            Map phonesHash = c.getPhoneNumbers();
            Container phones;
            if(phonesHash != null && phonesHash.size() > 0) {
                Button[] phoneArr = new Button[phonesHash.size()];
                int off = 0;
                for(Object ee : phonesHash.values()) {
                    phoneArr[off] = new Button((String)ee);
                    FontImage.setMaterialIcon(phoneArr[off], FontImage.MATERIAL_PHONE);
                    phoneArr[off].addActionListener(ev -> {
                        dlg.dispose();
                        Display.getInstance().dial((String)ee);
                    });
                    off ++;
                }
                phones = BoxLayout.encloseY(phoneArr);
            } else {
                phones = new Container(BoxLayout.y());
            }


            dlg.add("Phones").add(phones).
                    add("Emails").add(emails);

            if(c.getBirthday() == 0) {
                dlg.add("Birthday").add("---");
            } else {
                dlg.add("Birthday").add(L10NManager.getInstance().formatDateShortStyle(new Date(c.getBirthday())));
            }
            dlg.setDisposeWhenPointerOutOfBounds(true);
            dlg.setBackCommand(new Command(""));
            dlg.showPacked(BorderLayout.SOUTH, true);
        });

        ShareButton share = new ShareButton();
        share.setUIID("SwipeableContainerShareButton");
        FontImage.setMaterialIcon(share, FontImage.MATERIAL_SHARE, 8);
        share.setText("");
        share.setTextToShare(dname + notNullOrEmpty(" phone: ", c.getPrimaryPhoneNumber()) + 
                notNullOrEmpty(" email: ", c.getPrimaryEmail()));

        
        Button call = new Button();
        call.setUIID("SwipeableContainerInfoButton");
        FontImage.setMaterialIcon(call, FontImage.MATERIAL_CALL, 8);
        call.addActionListener(e -> Display.getInstance().dial(c.getPrimaryPhoneNumber()));

        Container options;
        if(c.getPrimaryEmail() != null && c.getPrimaryEmail().length() > 0) {
            Button email = new Button();
            email.setUIID("SwipeableContainerInfoButton");
            FontImage.setMaterialIcon(email, FontImage.MATERIAL_EMAIL, 8);
            email.addActionListener(e -> {
                Message m = new Message("");
                Display.getInstance().sendMessage(new String[] {c.getPrimaryEmail()}, "Sent from Codename One!", m);
            });
            options = GridLayout.encloseIn(4, call, email, info, share);
        }  else {
            options = GridLayout.encloseIn(3, call, info, share);
        }


        SwipeableContainer sc = new SwipeableContainer(
                options, 
                mb);
        //contactsDemo.add(sc);
        sc.addSwipeOpenListener(e -> {
            // auto fold the swipe when we go back to scrolling
            parent.addScrollListener(new ScrollListener() {
                int initial = -1;
                @Override
                public void scrollChanged(int scrollX, int scrollY, int oldscrollX, int oldscrollY) {
                    // scrolling is very sensitive on devices...
                    if(initial < 0) {
                        initial = scrollY;
                    }
                    lastScroll = System.currentTimeMillis();
                    if(Math.abs(scrollY - initial) > mb.getHeight() / 2) {
                        if(sc.getParent() != null) {
                            sc.close();
                        }
                        parent.removeScrollListener(this);
                    }
                }
            });
        });

        

        // can happen in the case of got() contacts
        if(c.getId() != null)  {
            Display.getInstance().scheduleBackgroundTask(() -> {
                // let the UI finish loading first before we proceed with the images
                while(!finishedLoading) {
                    Util.sleep(100);
                }

                int scrollY = parent.getScrollY();

                // don't do anything while we are scrolling or animating
                long idle = System.currentTimeMillis() - lastScroll;
                while(idle < 1500 || parent.getAnimationManager().isAnimating() || scrollY != parent.getScrollY()) {
                    scrollY = parent.getScrollY();
                    Util.sleep(Math.min(1500, Math.max(100, 2000 - ((int)idle))));
                    idle = System.currentTimeMillis() - lastScroll;
                }

                // fetch only the picture which is the last missing piece
                Contact picContact = Display.getInstance().getContactById(c.getId(), false, true, false, false, false);
                Image img = picContact.getPhoto();
                if(img != null) {
                    // UI/Image manipulation must be done on the EDT
                    Display.getInstance().callSerially(() -> {
                        Image rounded = img.fill(circleMaskWidth, circleMaskHeight).applyMask(circleMask);
                        Image mutable = Image.createImage(circleMaskWidth, circleMaskHeight, 0);
                        Graphics g = mutable.getGraphics();
                        g.drawImage(rounded, 0, 0);
                        g.drawImage(circleLineImage, 0, 0);
                        mb.setIcon(mutable);
                    });

                    // yield slightly so we don't choke the EDT while a user might be scrolling...
                    Util.sleep(5);
                } 
            });
        }
        return sc;
    }
    
}
